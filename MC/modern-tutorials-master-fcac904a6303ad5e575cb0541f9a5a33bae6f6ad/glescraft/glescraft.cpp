#include <glad.h>
#include <GLFW/glfw3.h>
#include <stb_image.h>

#include <camera.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/noise.hpp>
#include <iostream>
#include <time.h>

/* GIMP RGBA C-Source image dump (textures.c) */

static const struct {
	unsigned int 	 width;
	unsigned int 	 height;
	unsigned int 	 bytes_per_pixel; /* 3:RGB, 4:RGBA */
	unsigned char	 pixel_data[256 * 16 * 4 + 1];
} textures = {
	256, 16, 4,
	"\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\252\\\3\377\252f\0\377\245d\0\377\241_\0\377\251Y\0\377\252c\7\377\235"
	"j\6\377\251R\5\377\243c\5\377\261\\\0\377\251]\0\377\260n\0\377\254a\0\377"
	"\251`\1\377\253e\0\377\243f\0\377)\252\0\377%\247\2\377.\272\3\3774\253\5"
	"\377%\235\0\377-\245\0\377*\245\6\3772\247\0\377(\257\0\377$\253\0\3771\250"
	"\0\377*\257\13\377%\250\0\377\32\244\14\3776\255\0\377.\251\0\377$\240\3"
	"\377'\256\0\377\40\251\0\377*\242\1\3770\246\0\377\35\234\10\377-\250\12"
	"\377(\234\1\3779\265\16\377'\246\0\377*\257\0\377(\271\24\377(\253\14\377"
	"\40\261\7\3772\246\0\377+\237\3\377$j\16\362\37a\14\365$i\24^$g\12\265\37"
	"\\\12\377#g\17\0#d\14\377(w\30\377'e\6\377$q\26\377\"q\13\373\37p\21\377"
	"\"z\15\13,j\10u\37g\20z\40\\\16\320\304\2027\377\274{*\377\304\2027\377\314"
	"\2103\377\304\210>\377\304\2027\377\304\2027\377\304\2073\377\274{*\377\304"
	"\2073\377\304\210>\377\304\202+\377\304\2027\377\304\2027\377\274u.\377\244"
	"`\36\377ppp\377aaa\377iii\377ddd\377```\377ddd\377ddd\377ddd\377bbb\377b"
	"bb\377ccc\377ddd\377ddd\377aaa\377iii\377[[[\377\345\325\"\377\337\317\34"
	"\377\344\324!\377\351\331&\377\342\322\37\377\351\331&\377\336\316\33\377"
	"\350\330%\377\352\332'\377\351\331&\377\337\317\34\377\360\340-\377\350\330"
	"%\377\351\331&\377\352\332'\377\345\325\"\377\0`\360\224\0]\350\204\0f\377"
	"\226\0b\366\210\0l\377\204\0Y\340\217\0f\377\205\0a\364r\0e\374\214\0f\377"
	"\213\0m\377\211\0a\362\207\0e\374\206\0]\350\205\0f\377\230\0_\356|\320\320"
	"\320\377\320\320\320\377\320\320\320\377\320\320\320\377\320\320\320\377"
	"\320\320\320\377\320\320\320\377\320\320\320\377\320\320\320\377\320\320"
	"\320\377\320\320\320\377\320\320\320\377\320\320\320\377\320\320\320\377"
	"\320\320\320\377\320\320\320\377\202\202\202\377\203\203\203\377\200\200"
	"\200\377}}}\377\200\200\200\377xxx\377\203\203\203\377\205\205\205\377\200"
	"\200\200\377qqq\377\214\214\214\377\200\200\200\377\202\202\202\377zzz\377"
	"\204\204\204\377\207\207\207\377ppp\377aaa\377iii\377ddd\377```\377ddd\377"
	"ddd\377ddd\377bbb\377bbb\377ccc\377ddd\377ddd\377aaa\377iii\377[[[\377\304"
	"\2027\377\274{*\377eB\35\377mH\31\377eH$\377eB\35\377eB\35\377eG\31\377^"
	"=\25\377eG\31\377eH$\377eB\25\377eB\35\377eB\35\377\274u.\377\244`\36\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0"
	"\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0"
	"\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\246n\0\377\255e\0\377\252q\0\377\247W\11\377"
	"\245k\0\377\250d\0\377\260c\12\377\255]\3\377\263g\0\377\251e\0\377\254b"
	"\0\377\244Y\2\377\250i\7\377\254f\2\377\246`\10\377\250m\2\377(\256\2\377"
	"\34\245\0\377\"\244\6\377&\255\0\3774\253\0\377,\243\0\377\"\261\0\3775\256"
	"\0\377&\247\6\377)\255\0\377!\260\0\377$\256\0\377\"\251\4\377%\243\0\377"
	"(\245\5\377!\237\0\377(\251\0\377,\251\1\377(\251\0\377\36\251\0\377\"\247"
	"\0\377/\243\0\377(\252\0\377'\251\2\377$\257\0\377\40\237\22\377-\247\2\377"
	"&\262\0\377.\260\2\377&\251\0\377(\250\3\377+\254\0\377#b\11\377\33q\13\363"
	"'q\16Y\34k\20z\36m\17\377\37n\21s)s\33\324\33e\13\377%i\15\2641g\15\377$"
	"i\11\377#T\13\3311j\22\326\24a\20X\36g\12\377)Y\17\337\274{*\377\274t#\377"
	"\264t-\377\304|+\377\304\2073\377\314\2103\377\304\202+\377\304\2027\377"
	"\274{*\377\274{*\377\254h\37\377\234^\22\377\244`\36\377\264l!\377\264t-"
	"\377\264l!\377ccc\377mmm\377ddd\377^^^\377\\\\\\\377]]]\377ddd\377ccc\377"
	"aaa\377ddd\377aaa\377fff\377ccc\377fff\377ddd\377ddd\377\336\316\33\377\341"
	"\321\36\377\341\321\36\377\341\321\36\377\356\336+\377\347\327$\377\347\327"
	"$\377\326\306\23\377\351\331&\377\341\321\36\377\347\327$\377\343\323\40"
	"\377\344\324!\377\345\325\"\377\336\316\33\377\346\326#\377\0_\356\200\0"
	"a\362n\0_\356k\0b\366\235\0q\377|\0]\350\207\0c\370\225\0g\377\235\0b\366"
	"u\0p\377\211\0f\377\206\0g\377~\0n\377\200\0g\377x\0c\370\214\0g\377\200"
	"\320\320\320\377\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\320\320"
	"\320\377\324LL\377\304FF\377\330MM\377\210\210\210\377\320JJ\377\302EE\377"
	"\324LL\377\324LL\377\312HH\377\277DD\377\307GG\377\322KK\377\204\204\204"
	"\377\315II\377\276DD\377\306GG\377ccc\377mmm\377ddd\377^^^\377\\\\\\\377"
	"]]]\377ddd\377ccc\377aaa\377ddd\377aaa\377fff\377ccc\377fff\377ddd\377dd"
	"d\377\274{*\377^:\21\377\331\263F\377\341\273D\377\341\302L\377\345\303L"
	"\377\341\300D\377\341\300P\377\335\272C\377\335\272C\377\325\2478\377\315"
	"\235+\377\321\2377\377\331\253:\377Z:\26\377\264l!\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0"
	"\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0"
	"\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377\377\377\0\0"
	"\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\255`\2\377\246g\10\377\251i\0\377\244c\15\377\253i\11\377\245^\3\377\251"
	"Y\0\377\247c\5\377\237h\0\377\244n\10\377\252i\10\377\251h\0\377\256c\0\377"
	"\261^\0\377\242_\0\377\243c\0\377(\262\2\377,\250\6\377-\244\10\377(\242"
	"\0\377*\267\0\377%\250\7\377.\247\2\377\"\245\0\377-\252\7\377,\243\4\377"
	"0\245\3\377,\241\3\3772\245\0\377'\240\0\377&\243\12\377(\251\1\377&\246"
	"\7\3770\252\10\377/\251\0\377-\255\1\377&\270\0\377,\252\0\377(\244\0\377"
	"#\236\0\377)\246\0\377'\246\12\377\40\253\0\377(\250\11\377-\252\5\377+\262"
	"\3\377,\254\10\377*\251\5\377#[\0\377\35i\6\377$^\2j)s\26\377(i\21\276*`"
	"\13\377\36h\21\377!e\11\377\34n\12\323\33h\22\311#m\16~%b\3\377(h\16\377"
	"\40j\20\377!u\17u#\\\13\377\304}6\377\274{*\377\274{*\377\274u.\377\264l"
	"!\377\254h\37\377\254`\24\377\244g\31\377\244_\24\377\234^\22\377\244_\24"
	"\377\254h\37\377\264l!\377\264l!\377\264l!\377\254h\37\377ppp\377ZZZ\377"
	"\\\\\\\377fff\377ppp\377kkk\377fff\377jjj\377\\\\\\\377ooo\377]]]\377iii"
	"\377lll\377^^^\377ddd\377ddd\377\344\324!\377\342\322\37\377\336\316\33\377"
	"\357\337,\377\351\331&\377\347\327$\377\351\331&\377\351\331&\377\352\332"
	"'\377\350\330%\377\345\325\"\377\343\323\40\377\352\332'\377\341\321\36\377"
	"\344\324!\377\355\335*\377\0e\374}\0^\354\204\0`\360s\0Z\342y\0i\377x\0f"
	"\377u\0j\377p\0n\377\200\0f\377\222\0^\354y\0b\366\212\0f\377x\0f\377\201"
	"\0]\350u\0k\377}\0j\377q\320\320\320\377\377\377\377\0\377\377\377\0\320"
	"\320\320\377\320\320\320\377\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\320\320\320\377\304FF\377\314II\377\312HH\377\207\207"
	"\207\377\306GG\377\277DD\377\314II\377\311HH\377\304FF\377\306GG\377\277"
	"DD\377\306GG\377{{{\377\311HH\377\306GG\377\274CC\377ppp\377ZZZ\377\\\\\\"
	"\377fff\377ppp\377kkk\377fff\377jjj\377\\\\\\\377ooo\377]]]\377iii\377ll"
	"l\377^^^\377ddd\377ddd\377e>\34\377\335\272C\377\274{*\377\274u.\377Z6\20"
	"\377V4\17\377V0\12\377R3\14\377R/\12\377N/\11\377R/\12\377V4\17\377\264l"
	"!\377\264l!\377\331\253:\377V4\17\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0"
	"\0\0\377\0\0\0\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\244_\0\377\245a\0\377\244W\2"
	"\377\240`\0\377\247_\0\377\262f\0\377\246_\0\377\247Z\0\377\236d\0\377\254"
	"a\0\377\246c\0\377\252W\14\377\243^\0\377\250`\4\377\244c\0\377\256g\4\377"
	"#\243\1\377!\224\0\3771\251\0\3772\245\0\3773\247\0\377\"\241\10\377&\255"
	"\0\377#\253\4\377*\252\0\377'\246\2\3770\245\0\377'\253\0\377)\271\10\377"
	"&\243\0\377)\251\0\377'\250\0\377/\253\0\377\37\252\3\377,\241\0\377!\251"
	"\0\377.\252\12\377%\267\0\377#\251\0\377!\255\10\377+\243\0\377(\251\0\377"
	"&\256\17\377,\251\0\377\40\241\3\377(\245\2\377$\263\14\377+\252\4\377\""
	"`\12\377#g\13\377'_\25\330\33m\14F+h\13\377#]\7\377%[\22\377&b\14W!l\27\315"
	"\37d\16\377,k\21\377'^\25\377\26k\17[\35e\7\277\37a\14\377\36t\7\377\264"
	"s#\377\274u.\377\304|+\377\264s#\377\244_\13\377\224L\11\377\224S\12\377"
	"\244Z\13\377\264t-\377\264m-\377\254h\37\377\264l!\377\264s#\377\264l!\377"
	"\274t#\377\274t#\377hhh\377lll\377ooo\377hhh\377```\377ddd\377mmm\377kkk"
	"\377ZZZ\377rrr\377ggg\377fff\377hhh\377___\377```\377nnn\377\336\316\33\377"
	"\347\327$\377\345\325\"\377\340\320\35\377\250\240F\377\345\325\"\377\344"
	"\324!\377\335\315\32\377\352\332'\377\336\316\33\377\340\320\35\377\335\315"
	"\32\377\347\327$\377\341\321\36\377\336\316\33\377\355\335*\377\0b\366\203"
	"\0i\377q\0`\360\203\0a\362\206\0i\377m\0d\372\213\0f\377\224\0e\374\221\0"
	"g\377\200\0a\362q\0f\377\217\0Z\342w\0]\352\203\0f\377\203\0e\374\212\0a"
	"\362\203\320\320\320\377\377\377\377\0\320\320\320\377\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\320\320\320\377\302EE\377\315II\377\277DD\377\204\204\204\377\274CC\377"
	"\276DD\377\317JJ\377\274CC\377\320JJ\377\302EE\377\277DD\377\302EE\377\210"
	"\210\210\377\317JJ\377\306GG\377\314II\377hhh\377lll\377777\377444\37700"
	"0\377ddd\377mmm\377kkk\377ZZZ\377rrr\377ggg\377fff\377hhh\377___\377```\377"
	"nnn\377Z9\21\377\335\264G\377\304|+\377Z9\21\377\321\236$\377\311\213\"\377"
	"\311\222#\377\321\231$\377\331\263F\377\331\254F\377\325\2478\377\331\253"
	":\377Z9\21\377\264l!\377\335\263<\377^:\21\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0"
	"\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0"
	"\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\377\377\377\0\253X\20\377\257c\3\377\244d\1"
	"\377\251g\0\377\256g\0\377\262j\0\377\254_\0\377\251Z\4\377\247j\2\377\231"
	"a\0\377\254c\5\377\245g\0\377\245`\6\377\252\\\3\377\250\\\1\377\257Y\0\377"
	"\257c\4\377\251b\2\377\254c\0\377\242h\11\377\245b\0\377\253Z\4\377\255l"
	"\0\377\251g\0\377\254a\0\377\252a\0\377\251j\10\377\257a\0\377\247Y\14\377"
	"\247e\0\377\256h\0\377\250Y\10\377\40\247\2\3771\244\13\377'\256\0\377$\252"
	"\0\377\"\252\0\377\37\251\0\377)\264\6\3771\245\0\377*\247\0\377\32\250\24"
	"\377)\234\0\377\"\250\7\377!\237\0\377(\251\0\377\36\260\1\377&\252\0\377"
	"\36Y\14\316\40v\17\332\40c\20\377&g\22\226'e\14\377#m\11\305\36k\11Z%h\30"
	"\377!j\31\377!q\10\377'n\33\377#f\20\371\35d\3\377#[\13\321\35h\17\244#g"
	"\17\0\264t-\377\274|5\377\304\2027\377\314\211E\377\304}6\377\274|5\377\304"
	"}6\377\314\211E\377\314\211E\377\304\2027\377\274|5\377\274|5\377\274u.\377"
	"\304t#\377\274{*\377\304|+\377nnn\377\\\\\\\377hhh\377ggg\377]]]\377ccc\377"
	"jjj\377```\377aaa\377jjj\377aaa\377hhh\377___\377fff\377ggg\377ccc\377\345"
	"\325\"\377\344\324!\377\337\317\34\377\353\333(\377\346\326#\377\351\331"
	"&\377\362\342/\377\336\316\33\377\350\330%\377\337\317\34\377\342\322\37"
	"\377\341\321\36\377\340\320\35\377\345\325\"\377\345\325\"\377\350\330%\377"
	"\0n\377\212\0f\377\201\0h\377y\0g\377t\0b\366v\0g\377\207\0^\354}\0b\366"
	"n\0c\370\200\0\\\346j\0a\364\227\0d\372\\\0f\377\214\0l\377\214\0j\377\213"
	"\0k\377\205\320\320\320\377\377\377\377\0\320\320\320\377\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\320\320\320\377\207\207\207\377ttt\377\203\203\203\377~~~\377\200\200"
	"\200\377\202\202\202\377}}}\377\205\205\205\377\202\202\202\377xxx\377tt"
	"t\377xxx\377\203\203\203\377\212\212\212\377\204\204\204\377\201\201\201"
	"\377nnn\377...\377\32\32\32\377\31\31\31\377...\377ccc\377jjj\377```\377"
	"aaa\377jjj\377aaa\377hhh\377___\377fff\377ggg\377ccc\377Z:\26\377\335\273"
	"N\377eB\35\377\345\303^\377\304}6\377\274|5\377e>\34\377mI+\377mI+\377eB"
	"\35\377\274|5\377\274|5\377\335\264G\377e:\21\377\335\272C\377e>\25\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0"
	"\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377"
	"\377\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\251a\20\377\253[\3\377\247c\5\377\262c\6\377\255_\0\377\245"
	"Z\0\377\254c\0\377\233c\0\377\245i\0\377\251e\0\377\244a\11\377\251l\0\377"
	"\262X\15\377\237b\0\377\264e\0\377\243e\0\377\251f\0\377\247]\0\377\262b"
	"\0\377\247`\0\377\237f\0\377\256i\0\377\252b\0\377\247n\0\377\257c\0\377"
	"\251a\0\377\263c\0\377\250b\5\377\244f\0\377\263e\0\377\264S\1\377\244c\0"
	"\3773\243\0\377(\253\20\377%\255\0\3773\250\5\3773\244\3\377&\247\0\377+"
	"\241\0\377)\264\5\377%\271\0\377+\256\3\377)\250\0\377\37\270\3\377&\257"
	"\5\377$\256\7\377%\251\2\377-\266\11\377'Z\22\377\40g\22\377$l\17\220\40"
	"q\1\377\33g\20\225\34t\16\377)s\0\212#g\3\377\40o\5\377/o\17\377%h\24\377"
	"$l\23\217\37j\24\377'c\16""6\35e\34\377\"g\17\377\264t-\377\264m-\377\254"
	"t-\377\274u.\377\304\210>\377\304\210>\377\304\2027\377\274\2026\377\274"
	"{*\377\274|5\377\274|5\377\304|+\377\304\2027\377\304}6\377\304}6\377\274"
	"{*\377ggg\377YYY\377```\377^^^\377bbb\377aaa\377___\377fff\377ddd\377fff"
	"\377eee\377___\377ddd\377aaa\377bbb\377ddd\377\346\326#\377\341\321\36\377"
	"\350\330%\377\351\331&\377\341\321\36\377\343\323\40\377\341\321\36\377\332"
	"\312\27\377\354\334)\377\344\324!\377\350\330%\377\346\326#\377\337\317\34"
	"\377\335\315\32\377\347\327$\377\351\331&\377\0`\360~\0i\377\235\0_\356\213"
	"\0j\377x\0b\366\200\0g\377\222\0i\377\216\0j\377q\0f\377\223\0c\370}\0j\377"
	"\200\0b\366\203\0g\377t\0f\377\201\0_\356\203\0i\377\212\320\320\320\377"
	"\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\320\320\320\377\314II\377"
	"\320JJ\377\264@@\377\307GG\377\315II\377\307GG\377\307GG\377}}}\377\311H"
	"H\377\306GG\377\342QQ\377\307GG\377\277DD\377\311HH\377\277DD\377~~~\377"
	"ggg\377,,,\377\30\30\30\377\27\27\27\377111\377aaa\377___\377fff\377ddd\377"
	"fff\377eee\377___\377ddd\377aaa\377bbb\377ddd\377Z:\26\377\331\254F\377V"
	":\26\377\335\264G\377\304\210>\377eH$\377\341\300P\377\335\300O\377\335\272"
	"C\377\335\273N\377^>\33\377\304|+\377\341\300P\377e>\34\377\341\274O\377"
	"^=\25\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0"
	"\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0"
	"\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377"
	"\377\377\377\377\377\377\0\0\0\377\377\377\377\377\0\0\0\377\377\377\377"
	"\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\261h\11\377\251b\0\377\257_\2\377\255_\13\377\256_\0\377"
	"\254g\10\377\236b\0\377\252_\0\377\245`\4\377\233g\0\377\236]\1\377\262\\"
	"\0\377\263_\0\377\246f\2\377\251\\\0\377\246h\1\377\251`\0\377\251f\4\377"
	"\245i\0\377\252c\2\377\244S\0\377\253d\0\377\243u\11\377\245h\0\377\247a"
	"\5\377\255g\0\377\251a\5\377\256g\7\377\261\\\7\377\257[\0\377\244q\7\377"
	"\256]\13\377(\254\6\377,\253\0\377'\257\2\377.\243\0\377(\250\7\377#\251"
	"\0\377$\256\0\377\"\255\0\377\"\245\0\377+\256\0\377&\251\0\377(\250\2\377"
	"&\257\1\377(\254\0\3770\255\0\377.\267\0\377$k\23\377.f\0\377#o\22\377\40"
	"h\20\271+s\3\377&_\22\377!c\20\216\36a\16\271)o\10""4\31f\17\332#f\11\205"
	"%h\16\377$i\15\377!j\3T#g\15\377+f\24\270\314\216F\377\304\212L\377\304\210"
	">\377\304\216@\377\314\224L\377\314\216F\377\304\210>\377\274}D\377\274\207"
	"4\377\304\2073\377\264{+\377\254n$\377\254n\34\377\274|5\377\304\210>\377"
	"\314\216F\377ZZZ\377bbb\377ddd\377ddd\377[[[\377ddd\377^^^\377iii\377ggg"
	"\377ddd\377ccc\377```\377^^^\377```\377hhh\377eee\377\345\325\"\377\347\327"
	"$\377\340\320\35\377\342\322\37\377\345\325\"\377\351\331&\377\345\325\""
	"\377\345\325\"\377\350\330%\377\341\321\36\377\345\325\"\377\346\326#\377"
	"\335\315\32\377\360\340-\377\351\331&\377\335\315\32\377\0a\364X\0a\362\201"
	"\0k\377o\0e\374\210\0i\377\234\0f\377z\0g\377i\0n\377\200\0f\377|\0o\377"
	"w\0c\370\237\0j\377l\0a\362\177\0h\377{\0c\370\211\0f\377l\320\320\320\377"
	"\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\320\320\320\377\301EE\377"
	"\320JJ\377\277DD\377\314II\377\307GG\377\307GG\377\330MM\377\200\200\200"
	"\377\301EE\377\306GG\377\312HH\377\314II\377\304FF\377\333NN\377\301EE\377"
	"\200\200\200\377ZZZ\377bbb\377222\377222\377[[[\377ddd\377^^^\377iii\377"
	"ggg\377222\377111\377000\377///\377```\377hhh\377eee\377mN,\377\341\304e"
	"\377eH$\377\341\306Y\377mT2\377\345\306_\377\304\210>\377^>*\377^G\32\377"
	"\304\2073\377\331\272D\377V7\22\377\325\2555\377^>\33\377\341\303W\377mN"
	",\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0"
	"\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377"
	"\377\377\377\377\0\0\0\377\377\377\377\377\377\377\377\377\0\0\0\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\245c\0\377\262c\0\377\247`\10\377\243o\11\377\251a\0\377"
	"\244c\0\377\250`\11\377\272a\0\377\245d\7\377\241j\0\377\253c\1\377\262_"
	"\2\377\257a\4\377\251a\1\377\253W\0\377\255f\2\377\252j\0\377\243h\3\377"
	"\253k\0\377\243p\3\377\250r\0\377\252f\10\377\245a\0\377\253g\0\377\235f"
	"\0\377\245h\0\377\252^\0\377\245c\3\377\235s\5\377\245Z\6\377\245m\21\377"
	"\261g\5\3775\261\0\3773\242\0\377)\250\23\377,\265\0\3776\252\13\377\"\234"
	"\13\377$\251\0\377#\235\0\377&\243\2\377-\247\3\377'\240\4\377,\251\7\377"
	")\261\6\377)\256\1\377,\241\0\377(\242\0\377#s\26\312$_\24\377\34f\20\342"
	".k\24\377\26s\30\377*g\24\377*r\13\40!i\20\236%n\17\377(]\25m&g\32\375\32"
	"s\5\306\34h\17\277'd\24\6&e\24\377%e\12\377\254t-\377\264|5\377\274\2026"
	"\377\304\212L\377\264\2025\377\254t-\377\254t-\377\264|5\377\274\206+\377"
	"\304\216@\377\314\216:\377\274\2074\377\264|5\377\274\2026\377\274{*\377"
	"\254n$\377^^^\377ddd\377\\\\\\\377VVV\377jjj\377eee\377ddd\377iii\377ggg"
	"\377XXX\377UUU\377kkk\377fff\377```\377ddd\377fff\377\352\332'\377\344\324"
	"!\377\342\322\37\377\336\316\33\377\344\324!\377\346\326#\377\340\320\35"
	"\377\345\325\"\377\336\316\33\377\342\322\37\377\342\322\37\377\355\335*"
	"\377\244\234B\377\335\315\32\377\350\330%\377\356\336+\377\0_\356\177\0j"
	"\377\210\0m\377}\0j\377\223\0f\377\201\0]\352o\0b\366\206\0f\377\214\0d\372"
	"\217\0f\377v\0g\377\233\0j\377|\0j\377\216\0e\374w\0f\377w\0b\366y\320\320"
	"\320\377\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\320\320\320\377"
	"\267AA\377\311HH\377\306GG\377\302EE\377\267AA\377\314II\377\304FF\377\201"
	"\201\201\377\307GG\377\315II\377\277DD\377\312HH\377\273CC\377\306GG\377"
	"\266AA\377\204\204\204\377^^^\377ddd\377\\\\\\\377+++\377jjj\377eee\377d"
	"dd\377iii\377333\377,,,\377\25\25\25\377\32\32\32\377\31\31\31\377000\377"
	"ddd\377fff\377V:\26\377\331\273N\377^B\34\377\341\304e\377ZB\33\377\325\263"
	"F\377V:\26\377\331\273N\377\335\302D\377eN&\377\345\306S\377^G\32\377\331"
	"\273N\377^B\34\377\335\272C\377V7\22\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0"
	"\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0"
	"\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\0\0\0\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\247b\0\377\251"
	"a\0\377\254b\0\377\250b\0\377\245Y\17\377\246k\0\377\263e\14\377\261c\0\377"
	"\261X\5\377\251V\0\377\256\\\0\377\251c\14\377\251^\12\377\262g\0\377\250"
	"^\1\377\252b\1\377\236`\5\377\261m\0\377\251i\5\377\252b\0\377\234b\7\377"
	"\244c\0\377\240U\13\377\237c\5\377\257S\0\377\270Y\5\377\261U\6\377\243e"
	"\0\377\251i\3\377\266{\0\377\262b\0\377\233b\0\377(\233\3\377\40\263\0\377"
	"'\241\7\377#\241\1\377(\255\2\3771\230\0\377)\251\0\377%\252\0\377&\256\20"
	"\377$\252\0\377+\254\1\377#\256\7\377(\250\10\377#\237\4\377(\246\12\377"
	"(\254\0\377%c\14\177\26d\21\377!a\21\377&u\17\377\23i\11\377\37k\23\203\37"
	"g\14\377#i\16\226\40`\13\267#j\21\377'i\15\377\37r\22\377\40i\16\377\37n"
	"\13\377+f\17\320\40d\30\346\274\216>\377\274\210=\377\274\216>\377\304\224"
	"M\377\314\232M\377\324\225M\377\304\212L\377\274u.\377\314\216F\377\304\207"
	"3\377\274{*\377\274{*\377\274t#\377\264l\24\377\264l!\377\274t#\377ddd\377"
	"fff\377eee\377ccc\377hhh\377\\\\\\\377ddd\377bbb\377aaa\377fff\377aaa\377"
	"ttt\377aaa\377iii\377ggg\377fff\377\342\322\37\377\355\335*\377\351\331&"
	"\377\343\323\40\377\350\330%\377\346\326#\377\346\326#\377\341\321\36\377"
	"\352\332'\377\354\334)\377\345\325\"\377\351\331&\377\345\325\"\377\344\324"
	"!\377\361\341.\377\350\330%\377\0l\377\206\0b\366\220\0l\377\250\0h\377u"
	"\0g\377r\0f\377\231\0b\366\205\0h\377{\0g\377\230\0i\377n\0i\377\227\0b\366"
	"\204\0[\344p\0f\377w\0h\377|\0j\377y\320\320\320\377\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\320\320\320\377\204\204\204\377{{{\377yyy\377"
	"\207\207\207\377~~~\377|||\377\206\206\206\377{{{\377xxx\377\203\203\203"
	"\377\210\210\210\377\200\200\200\377}}}\377\204\204\204\377\203\203\203\377"
	"\205\205\205\377ddd\377fff\377eee\377ccc\377hhh\377\\\\\\\377ddd\377bbb\377"
	"aaa\377333\377\30\30\30\377\35\35\35\377\30\30\30\377444\377ggg\377fff\377"
	"^N$\377\335\303V\377^N$\377\341\311f\377mZ3\377\351\311f\377eJ2\377\335\264"
	"G\377\345\306_\377eG\31\377\335\272C\377^=\25\377\335\263<\377Z6\12\377\331"
	"\253:\377^:\21\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0"
	"\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\377\377\377\0\254U\0\377\263a\0\377\260c\0\377"
	"\253f\0\377\256`\4\377\250i\0\377\247c\0\377\243c\4\377\256`\0\377\256d\0"
	"\377\237b\0\377\246Y\0\377\247i\6\377\242`\0\377\251a\3\377\244^\0\377\251"
	"b\5\377\243h\0\377\251d\1\377\244^\0\377\263]\0\377\246f\3\377\260b\5\377"
	"\254c\0\377\256_\0\377\264`\4\377\246d\4\377\264b\4\377\253a\14\377\260l"
	"\0\377\255n\2\377\250_\0\377$\253\3\377#\247\0\377\37\265\0\377\36\256\0"
	"\377,\253\0\377)\253\1\3778\262\0\377)\251\0\377*\246\0\377!\256\0\377\34"
	"\247\0\377&\254\0\377'\255\0\377%\241\10\377%\246\0\377%\252\1\377\"f\23"
	"\377$n\5b1t\23z#o\24\242\37o\17\377!l\11\341\"g\17\377)j\16\377\35i\15\377"
	"(l\17\377\36j\7\377$j\10\377!`\23\377,d\16\375\33g\0\247\35c\15\377\304\216"
	"@\377\274\210=\377\264|5\377\264\2025\377\274\210=\377\304\210>\377\304\210"
	">\377\304\2027\377\244i$\377\254h\37\377\254n\34\377\264s#\377\264s#\377"
	"\264s#\377\264s#\377\304|+\377lll\377ddd\377iii\377kkk\377iii\377[[[\377"
	"aaa\377eee\377jjj\377ddd\377bbb\377ccc\377hhh\377fff\377ooo\377ddd\377\335"
	"\315\32\377\351\331&\377\353\333(\377\345\325\"\377\343\323\40\377\343\323"
	"\40\377\347\327$\377\335\315\32\377\344\324!\377\350\330%\377\345\325\"\377"
	"\352\332'\377\343\323\40\377\335\315\32\377\333\313\30\377\347\327$\377\0"
	"f\377\213\0f\377\200\0b\366\207\0_\356\201\0e\374k\0l\377\221\0f\377l\0d"
	"\372e\0a\364}\0l\377\201\0i\377\177\0a\362\212\0c\370r\0[\344\225\0`\360"
	"p\0f\377\201\320\320\320\377\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\320\320\320\377\314II\377\312HH\377\312HH\377\203\203\203\377\322KK\377"
	"\322KK\377\304FF\377\267AA\377\304FF\377\306GG\377\306GG\377\306GG\377\202"
	"\202\202\377\330MM\377\307GG\377\274CC\377lll\377ddd\377iii\377kkk\377ii"
	"i\377[[[\377aaa\377eee\377jjj\377ddd\377111\377111\377444\377333\377ooo\377"
	"ddd\377eN&\377\335\303V\377Z>\33\377\331\300N\377^H#\377\341\303W\377\304"
	"\210>\377eB\35\377R4\22\377\254h\37\377\325\2555\377Z9\21\377\331\262<\377"
	"Z9\21\377\331\262<\377e>\25\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\0\0"
	"\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0"
	"\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\242\\\0\377\251j\3\377"
	"\250a\7\377\245c\0\377\240e\11\377\256q\0\377\247`\0\377\264c\0\377\245g"
	"\2\377\250i\10\377\251i\0\377\245a\0\377\251X\0\377\253g\2\377\244_\7\377"
	"\251q\4\377\263b\6\377\252g\1\377\240f\1\377\250p\5\377\247s\0\377\243c\0"
	"\377\253e\0\377\251]\0\377\261g\6\377\241Z\13\377\257V\0\377\251e\0\377\250"
	"a\0\377\243^\12\377\247m\0\377\251c\0\377'\236\0\377!\236\1\377+\250\4\377"
	"(\271\0\377*\243\5\377+\253\0\377(\255\0\377(\262\12\3772\267\0\377.\233"
	"\10\377*\253\0\377\"\270\13\3770\250\1\377!\262\0\3770\230\3\377'\246\0\377"
	"'f\22\377\"j\24\377)k\17\34*a\16\316\40l\20\241#l\21\262\34m\1R\"i\11\377"
	"&i\7\377\37j\17\377\"r\24\377\"h\15\377#b\11\377%t\21\377&e\14\377&l\21\353"
	"\304\210>\377\304\210>\377\304\216@\377\304\223A\377\304\216@\377\304\210"
	">\377\274{*\377\264s#\377\264l!\377\264s#\377\274{*\377\274{*\377\274{*\377"
	"\304\202+\377\304\210>\377\314\216:\377ddd\377iii\377___\377bbb\377^^^\377"
	"hhh\377iii\377^^^\377ddd\377___\377\\\\\\\377```\377fff\377]]]\377kkk\377"
	"___\377\345\325\"\377\347\327$\377\356\336+\377\345\325\"\377\344\324!\377"
	"\337\317\34\377\346\326#\377\347\327$\377\355\335*\377\347\327$\377\350\330"
	"%\377\347\327$\377\343\323\40\377\342\322\37\377\341\321\36\377\337\317\34"
	"\377\0a\364f\0i\377\200\0e\374v\0h\377\203\0a\362\213\0p\377\214\0`\360w"
	"\0j\377\203\0d\372\207\0l\377t\0a\364\206\0f\377\204\0i\377{\0d\372y\0j\377"
	"\200\0n\377\213\320\320\320\377\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\320\320\320\377\311HH\377\324LL\377\312HH\377\203\203\203\377\304"
	"FF\377\307GG\377\306GG\377\332NN\377\304FF\377\277DD\377\306GG\377\273CC"
	"\377\201\201\201\377\277DD\377\301EE\377\277DD\377ddd\377iii\377___\377b"
	"bb\377^^^\377hhh\377iii\377^^^\377ddd\377___\377...\377000\377fff\377]]]"
	"\377kkk\377___\377eH$\377\341\303W\377eN&\377\341\310Z\377\304\216@\377e"
	"H$\377\335\272C\377\331\262<\377\331\253:\377\331\262<\377^=\25\377\274{"
	"*\377\335\272C\377eB\25\377\341\303W\377mN\40\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0"
	"\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\234g\14\377\250g\3\377\252k\0\377\251j\0\377\251d\0\377\234n\13\377\253"
	"_\1\377\260e\0\377\263^\0\377\246k\6\377\243n\0\377\251r\6\377\245g\10\377"
	"\255Z\3\377\251`\0\377\253b\0\377\260g\0\377\251e\2\377\245p\0\377\243n\1"
	"\377\257Z\5\377\253f\7\377\262^\0\377\253]\0\377\251X\4\377\240a\0\377\256"
	"e\3\377\242`\12\377\244h\0\377\255l\4\377\251c\3\377\240\\\4\377)\240\0\377"
	"-\251\11\377*\257\7\3771\231\0\377&\253\0\377+\242\2\377.\251\0\377'\244"
	"\0\377\40\251\10\377)\247\0\377,\251\0\377\40\251\3\377*\251\3\377.\237\1"
	"\377(\243\0\377*\252\0\377\40n\31\377*r\17\220%g\17\324\35^\17\303#g\20\250"
	"\40h\12\377&l\12\377+b\23\260#`\32\377\35e\31\377\35m\17\377!`\26b#d\20="
	"\37\\\34\377*e\13\337&g\21\377\274\2026\377\274{*\377\254t#\377\254h\37\377"
	"\244n\40\377\264{+\377\264\2025\377\304\2073\377\264s#\377\274{*\377\274"
	"{*\377\264s#\377\264t-\377\274\210=\377\314\224B\377\324\225M\377jjj\377"
	"^^^\377hhh\377]]]\377fff\377jjj\377lll\377iii\377fff\377bbb\377ccc\377ll"
	"l\377ddd\377]]]\377ooo\377iii\377\354\334)\377\331\311\26\377\364\3441\377"
	"\346\326#\377\351\331&\377\337\317\34\377\243\233A\377\337\317\34\377\347"
	"\327$\377\344\324!\377\333\313\30\377\344\324!\377\346\326#\377\346\326#"
	"\377\345\325\"\377\343\323\40\377\0f\377\201\0f\377u\0Z\342\203\0k\377\212"
	"\0f\377\222\0h\377\216\0h\377p\0^\354y\0`\360\177\0k\377\177\0b\366a\0^\354"
	"\213\0a\364|\0f\377\203\0d\372\201\0g\377\217\320\320\320\377\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\320\320\320\377\377\377\377\0\320\320\320\377\306GG\377\301EE"
	"\377\307GG\377\200\200\200\377\306GG\377\277DD\377\306GG\377\311HH\377\311"
	"HH\377\315II\377\327MM\377\261??\377\200\200\200\377\315II\377\306GG\377"
	"\301EE\377jjj\377^^^\377hhh\377]]]\377fff\377555\377lll\377iii\377fff\377"
	"bbb\377ccc\377lll\377ddd\377]]]\377ooo\377iii\377^B\34\377\335\272C\377V"
	":\21\377\325\2478\377\244n\40\377\264{+\377ZB\33\377eG\31\377Z9\21\377^="
	"\25\377\274{*\377\264s#\377\331\263F\377^H#\377\345\311[\377uU3\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0"
	"\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\253`\0\377\257e\1\377\245g\1\377\250f\0\377\236n\12\377\255"
	"a\7\377\250h\14\377\257]\1\377\264]\2\377\245L\0\377\255j\1\377\263f\7\377"
	"\252h\0\377\252e\0\377\246f\0\377\250\\\5\377\251^\0\377\246h\0\377\246g"
	"\0\377\250g\3\377\251\\\0\377\261c\0\377\243Y\0\377\250f\3\377\246\\\0\377"
	"\247f\5\377\256c\4\377\253_\0\377\261f\0\377\261f\0\377\251^\0\377\243h\5"
	"\377&\251\0\377)\242\2\377.\241\7\377&\247\0\377#\262\15\377/\231\0\377("
	"\255\10\377'\246\13\3773\257\1\377&\247\0\377!\266\0\3770\255\7\377\40\251"
	"\0\377\"\252\6\377)\255\0\377\36\253\0\377\25h\26\345!`\16\366*o\14x#j\23"
	"\246\"c\16\226*j\10\377\37a\17\320'i\21\377'h\33](h\26\377'a\14\377)j\34"
	"\377\40c\17\377\"X\21\377\34]\20""5\32p\21P\264s#\377\274u.\377\304\2073"
	"\377\314\216F\377\324\223D\377\314\224B\377\314\216:\377\304\216@\377\314"
	"\2103\377\324\210:\377\314\210<\377\264t-\377\254n\34\377\264t-\377\264t"
	"-\377\254t-\377fff\377hhh\377bbb\377ggg\377eee\377```\377___\377nnn\377a"
	"aa\377aaa\377jjj\377iii\377\\\\\\\377ddd\377ddd\377kkk\377\344\324!\377\345"
	"\325\"\377\345\325\"\377\347\327$\377\341\321\36\377\345\325\"\377\340\320"
	"\35\377\345\325\"\377\343\323\40\377\344\324!\377\345\325\"\377\335\315\32"
	"\377\341\321\36\377\344\324!\377\342\322\37\377\347\327$\377\0f\377n\0j\377"
	"\201\0f\377\205\0Z\342\212\0c\370q\0f\377x\0l\377\215\0j\377\203\0j\377\223"
	"\0j\377\213\0a\362\203\0j\377\211\0c\370v\0f\377\201\0f\377u\0f\377\224\320"
	"\320\320\377\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\320\320\320\377\377\377\377\0\320\320"
	"\320\377{{{\377\200\200\200\377\203\203\203\377\212\212\212\377yyy\377pp"
	"p\377vvv\377}}}\377\202\202\202\377\201\201\201\377\200\200\200\377\201\201"
	"\201\377~~~\377\205\205\205\377ttt\377\203\203\203\377fff\377hhh\377bbb\377"
	"ggg\377222\377000\377///\377777\377aaa\377aaa\377jjj\377iii\377\\\\\\\377"
	"ddd\377ddd\377kkk\377Z9\21\377\335\264G\377\304\2073\377mN,\377\351\310]"
	"\377\345\311[\377\345\306S\377\341\306Y\377\345\303L\377\351\303S\377\345"
	"\303U\377\331\263F\377V7\16\377\264t-\377\331\263F\377V:\26\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0"
	"\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0"
	"\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\0\0\0\377\377\377\377"
	"\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\252e\0\377\254"
	"d\0\377\261g\1\377\251p\1\377\260X\0\377\262c\2\377\251b\0\377\246a\5\377"
	"\236[\0\377\234c\0\377\244a\0\377\246a\6\377\253c\3\377\251`\0\377\256`\12"
	"\377\242]\14\377\251e\0\377\257c\0\377\251c\1\377\255c\0\377\247b\12\377"
	"\255c\0\377\246[\4\377\262^\0\377\246a\1\377\242d\10\377\262^\4\377\252j"
	"\0\377\260W\4\377\252`\0\377\252a\0\377\244`\1\377,\241\6\377/\230\4\377"
	"+\247\10\377,\255\2\377,\260\0\377.\260\0\377\33\255\0\377'\262\12\377.\250"
	"\4\377/\256\16\377(\246\0\377'\244\6\377(\251\3\377(\252\3\377$\277\0\377"
	"(\251\0\377#g\17\0(c\14\377\40j\0\377(g\0\342$b\6R'e\15\377\37_\15\211#g"
	"\17\0*g\21\377!m\24\377$g\17\377\31f\11\345\37l\34\377\35f\17\270\34k\34"
	"\377#X\21\255\314\216F\377\304\2027\377\274u.\377\254h\37\377\244`\36\377"
	"\254h\37\377\254h\37\377\264t-\377\274u.\377\274|5\377\274u.\377\264t-\377"
	"\254h\37\377\254h\37\377\254h\37\377\244`\36\377ddd\377ddd\377jjj\377bbb"
	"\377ccc\377bbb\377bbb\377iii\377mmm\377lll\377ggg\377ddd\377hhh\377ZZZ\377"
	"^^^\377aaa\377\347\327$\377\350\330%\377\350\330%\377\346\326#\377\343\323"
	"\40\377\336\316\33\377\351\331&\377\354\334)\377\350\330%\377\344\324!\377"
	"\334\314\31\377\345\325\"\377\350\330%\377\344\324!\377\343\323\40\377\343"
	"\323\40\377\0j\377\216\0n\377q\0g\377\213\0f\377\201\0f\377s\0e\374\225\0"
	"Z\342j\0f\377\210\0i\377u\0n\377\206\0n\377\205\0c\370q\0f\377q\0c\370u\0"
	"c\370\207\0h\377\207\320\320\320\377\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\320\320\320\377\320\320\320\377\377\377\377"
	"\0\377\377\377\0\320\320\320\377\306GG\377\302EE\377\320JJ\377\302EE\377"
	"\311HH\377\322KK\377\274CC\377~~~\377\327MM\377\311HH\377\317JJ\377\302E"
	"E\377\306GG\377\307GG\377\302EE\377}}}\377ddd\377ddd\377jjj\377111\377\30"
	"\30\30\377\30\30\30\377\30\30\30\377444\377mmm\377lll\377ggg\377ddd\377h"
	"hh\377ZZZ\377^^^\377aaa\377mN,\377\341\300P\377\274u.\377\254h\37\377R0\17"
	"\377V4\17\377V4\17\377Z:\26\377^:\27\377^>\33\377^:\27\377Z:\26\377\254h"
	"\37\377\254h\37\377\325\2478\377R0\17\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0"
	"\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0"
	"\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\0\0\0\377\377\377\377\377"
	"\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0"
	"\377\377\377\377\377\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\263d\0\377\244j\0\377\257l\3\377\257n\0\377\253"
	"^\0\377\240p\0\377\252f\0\377\246f\4\377\255b\0\377\254^\12\377\251]\0\377"
	"\267k\0\377\246g\0\377\264c\0\377\241c\10\377\255c\0\377\250j\0\377\251d"
	"\0\377\247a\11\377\251X\0\377\252Y\17\377\237W\6\377\242f\0\377\246j\10\377"
	"\252d\0\377\256a\1\377\266a\0\377\245W\0\377\252h\0\377\264]\0\377\251d\0"
	"\377\256k\3\377'\254\0\377&\256\0\377$\252\0\377,\250\3\377\36\251\0\377"
	"!\245\0\377\"\250\0\377+\251\6\377'\247\0\3773\243\6\377.\253\0\377,\263"
	"\0\377(\244\0\3770\251\4\377%\261\0\377(\253\2\377#k\20\377&a\23R\25d\7\250"
	"'i\11\263.e\22\377!f\13!#s\35\377\36o\15\377$^\4\377$i\27N#i\21\253\34p\20"
	"\377$k\16\377#k\14\377$d\24\377$c\24\377\304\212L\377\274\2026\377\264v<"
	"\377\264l!\377\254a\36\377\244Y\36\377\224S\12\377\224L\11\377\214L\10\377"
	"\224F\7\377\224L\11\377\244Z\24\377\254h\37\377\264e%\377\254h\37\377\264"
	"l!\377```\377bbb\377bbb\377ddd\377```\377bbb\377\\\\\\\377lll\377ddd\377"
	"lll\377ddd\377ggg\377eee\377lll\377jjj\377lll\377\340\320\35\377\345\325"
	"\"\377\341\321\36\377\355\335*\377\365\3452\377\354\334)\377\344\324!\377"
	"\340\320\35\377\347\327$\377\331\311\26\377\344\324!\377\346\326#\377\344"
	"\324!\377\351\331&\377\347\327$\377\353\333(\377\0b\366w\0^\354v\0b\366|"
	"\0n\377\226\0f\377m\0d\372t\0i\377\240\0i\377{\0g\377l\0f\377\212\0d\372"
	"|\0e\374~\0f\377\217\0o\377\177\0j\377~\0c\370\220\320\320\320\377\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0"
	"\377\377\377\0\377\377\377\0\377\377\377\0\320\320\320\377\322KK\377\304"
	"FF\377\277DD\377\320JJ\377\312HH\377\277DD\377\274CC\377\210\210\210\377"
	"\306GG\377\274CC\377\274CC\377\311HH\377\320JJ\377\267AA\377\314II\377~~"
	"~\377```\377bbb\377bbb\377222\377\30\30\30\377\30\30\30\377\27\27\27\377"
	"666\377ddd\377lll\377ddd\377ggg\377eee\377lll\377jjj\377lll\377\304\212L"
	"\377^B\34\377\331\265U\377\331\253:\377\325\2407\377\321\2307\377\311\222"
	"#\377\311\213\"\377\305\213!\377\311\205\40\377\311\213\"\377\321\231-\377"
	"\325\2478\377\331\244>\377V4\17\377\264l!\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0"
	"\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\0\0\0\377\377\377\377\377\0\0\0\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\0\0\0\377"
	"\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\0\377\377\377\0\377"
	"\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377"
	"\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377"
	"\0\377\377\377\0\377\377\377\0\377\377\377\0\252]\0\377\250b\0\377\243b\25"
	"\377\251\\\12\377\240n\17\377\252a\7\377\260^\3\377\256q\14\377\234r\2\377"
	"\252f\0\377\252`\0\377\244a\5\377\250l\0\377\244k\2\377\251d\10\377\247c"
	"\2\377\262e\3\377\247b\2\377\252`\0\377\251f\0\377\253W\1\377\263e\0\377"
	"\247m\0\377\254W\0\377\241t\0\377\245g\10\377\246P\0\377\257h\0\377\251\\"
	"\4\377\242r\0\377\255i\0\377\247c\0\377&\251\1\377#\242\0\377(\242\5\377"
	"+\256\0\3777\257\0\377'\251\4\377\"\247\0\377/\257\0\377*\250\10\377(\266"
	"\0\377'\236\13\377&\256\2\377/\250\14\377%\245\0\377%\252\0\377'\252\0\377"
	"&d\26\377#i\26\377$g\15\377\"h\15\377\31g\3\377!w\25\212\31_\33\377#j\23"
	"\364\36k\36\316)h\6\317$g\23\377\"f\13\377\36x\31\245(c\17\323\40n\7\313"
	"#g\17\0\244n,\377\234`\34\377\224T\26\377\224F\7\377\234N\24\377\244V\24"
	"\377\254^,\377\254^,\377\264m-\377\254h\37\377\244Y\36\377\254a\36\377\254"
	"a\36\377\244V\24\377\244U\14\377\244V\24\377```\377ZZZ\377```\377aaa\377"
	"fff\377ggg\377ccc\377fff\377hhh\377fff\377^^^\377jjj\377bbb\377aaa\377dd"
	"d\377___\377\346\326#\377\345\325\"\377\341\321\36\377\352\332'\377\343\323"
	"\40\377\352\332'\377\351\331&\377\334\314\31\377\345\325\"\377\337\317\34"
	"\377\334\314\31\377\332\312\27\377\335\315\32\377\341\321\36\377\350\330"
	"%\377\346\326#\377\0a\362\217\0f\377\207\0e\374k\0f\377y\0Y\336{\0e\374v"
	"\0n\377\207\0h\377\204\0d\372\203\0a\364\203\0j\377w\0e\374\200\0]\352\211"
	"\0j\377t\0l\377\177\0g\377\212\320\320\320\377\320\320\320\377\320\320\320"
	"\377\320\320\320\377\320\320\320\377\320\320\320\377\320\320\320\377\320"
	"\320\320\377\320\320\320\377\320\320\320\377\320\320\320\377\320\320\320"
	"\377\320\320\320\377\320\320\320\377\320\320\320\377\320\320\320\377\312"
	"HH\377\311HH\377\306GG\377\315II\377\304FF\377\307GG\377\306GG\377\202\202"
	"\202\377\306GG\377\273CC\377\301EE\377\315II\377\322KK\377\314II\377\315"
	"II\377}}}\377```\377ZZZ\377```\377000\377333\377333\377111\377fff\377hhh"
	"\377fff\377^^^\377jjj\377bbb\377aaa\377ddd\377___\377\244n,\377\234`\34\377"
	"J*\13\377J#\3\377N'\12\377R+\12\377V/\26\377V/\26\377Z6\26\377V4\17\377R"
	",\17\377V0\17\377V0\17\377R+\12\377\244U\14\377\244V\24\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
	"\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0"
	"\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
	"\377\377\377\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377",
};



void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void processInput(GLFWwindow *window);

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

// camera
Camera camera(glm::vec3(0.0f, 0.0f, 3.0f));
float lastX = SCR_WIDTH / 2.0f;
float lastY = SCR_HEIGHT / 2.0f;
bool firstMouse = true;

// timing
float deltaTime = 0.0f;	// time between current frame and last frame
float lastFrame = 0.0f;

static GLuint program;
static GLint attribute_coord;
static GLint uniform_mvp;
static GLuint texture;
static GLint uniform_texture;
static GLuint cursor_vbo;

static glm::vec3 position;
static glm::vec3 forward;
static glm::vec3 right;
static glm::vec3 up;
static glm::vec3 lookat;
static glm::vec3 angle;

static int ww, wh;
static int mx, my, mz;
static int face;
static uint8_t buildtype = 1;

static time_t now;
static unsigned int keys;
static bool select_using_depthbuffer = true;

// Size of one chunk in blocks
#define CX 16
#define CY 32
#define CZ 16

// Number of chunks in the world
#define SCX 32
#define SCY 2
#define SCZ 32

// Sea level
#define SEALEVEL 4

// Number of VBO slots for chunks
#define CHUNKSLOTS (SCX * SCY * SCZ)

static const int transparent[16] = { 2, 0, 0, 0, 1, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0 };
static const char *blocknames[16] = {
	"air", "dirt", "topsoil", "grass", "leaves", "wood", "stone", "sand",
	"water", "glass", "brick", "ore", "woodrings", "white", "black", "x-y"
};

struct byte4 {
	uint8_t x, y, z, w;
	byte4() {}
	byte4(uint8_t x, uint8_t y, uint8_t z, uint8_t w) : x(x), y(y), z(z), w(w) {}
};

static struct chunk *chunk_slot[CHUNKSLOTS] = { 0 };

struct chunk {
	uint8_t blk[CX][CY][CZ];
	struct chunk *left, *right, *below, *above, *front, *back;
	int slot;
	GLuint vbo;
	int elements;
	time_t lastused;
	bool changed;
	bool noised;
	bool initialized;
	int ax;
	int ay;
	int az;

	chunk() : ax(0), ay(0), az(0) {
		memset(blk, 0, sizeof blk);
		left = right = below = above = front = back = 0;
		lastused = now;
		slot = 0;
		changed = true;
		initialized = false;
		noised = false;
	}

	chunk(int x, int y, int z) : ax(x), ay(y), az(z) {
		memset(blk, 0, sizeof blk);
		left = right = below = above = front = back = 0;
		lastused = now;
		slot = 0;
		changed = true;
		initialized = false;
		noised = false;
	}

	uint8_t get(int x, int y, int z) const {
		if (x < 0)
			return left ? left->blk[x + CX][y][z] : 0;
		if (x >= CX)
			return right ? right->blk[x - CX][y][z] : 0;
		if (y < 0)
			return below ? below->blk[x][y + CY][z] : 0;
		if (y >= CY)
			return above ? above->blk[x][y - CY][z] : 0;
		if (z < 0)
			return front ? front->blk[x][y][z + CZ] : 0;
		if (z >= CZ)
			return back ? back->blk[x][y][z - CZ] : 0;
		return blk[x][y][z];
	}

	bool isblocked(int x1, int y1, int z1, int x2, int y2, int z2) {
		// Invisible blocks are always "blocked"
		if (!blk[x1][y1][z1])
			return true;

		// Leaves do not block any other block, including themselves
		if (transparent[get(x2, y2, z2)] == 1)
			return false;

		// Non-transparent blocks always block line of sight
		if (!transparent[get(x2, y2, z2)])
			return true;

		// Otherwise, LOS is only blocked by blocks if the same transparency type
		return transparent[get(x2, y2, z2)] == transparent[blk[x1][y1][z1]];
	}

	void set(int x, int y, int z, uint8_t type) {
		// If coordinates are outside this chunk, find the right one.
		if (x < 0) {
			if (left)
				left->set(x + CX, y, z, type);
			return;
		}
		if (x >= CX) {
			if (right)
				right->set(x - CX, y, z, type);
			return;
		}
		if (y < 0) {
			if (below)
				below->set(x, y + CY, z, type);
			return;
		}
		if (y >= CY) {
			if (above)
				above->set(x, y - CY, z, type);
			return;
		}
		if (z < 0) {
			if (front)
				front->set(x, y, z + CZ, type);
			return;
		}
		if (z >= CZ) {
			if (back)
				back->set(x, y, z - CZ, type);
			return;
		}

		// Change the block
		blk[x][y][z] = type;
		changed = true;

		// When updating blocks at the edge of this chunk,
		// visibility of blocks in the neighbouring chunk might change.
		if (x == 0 && left)
			left->changed = true;
		if (x == CX - 1 && right)
			right->changed = true;
		if (y == 0 && below)
			below->changed = true;
		if (y == CY - 1 && above)
			above->changed = true;
		if (z == 0 && front)
			front->changed = true;
		if (z == CZ - 1 && back)
			back->changed = true;
	}

	static float noise2d(float x, float y, int seed, int octaves, float persistence) {
		float sum = 0;
		float strength = 1.0;
		float scale = 1.0;

		for (int i = 0; i < octaves; i++) {
			sum += strength * glm::simplex(glm::vec2(x, y) * scale);
			scale *= 2.0;
			strength *= persistence;
		}

		return sum;
	}

	static float noise3d_abs(float x, float y, float z, int seed, int octaves, float persistence) {
		float sum = 0;
		float strength = 1.0;
		float scale = 1.0;

		for (int i = 0; i < octaves; i++) {
			sum += strength * fabs(glm::simplex(glm::vec3(x, y, z) * scale));
			scale *= 2.0;
			strength *= persistence;
		}

		return sum;
	}

	void noise(int seed) {
		if (noised)
			return;
		else
			noised = true;

		for (int x = 0; x < CX; x++) {
			for (int z = 0; z < CZ; z++) {
				// Land height
				float n = noise2d((x + ax * CX) / 256.0, (z + az * CZ) / 256.0, seed, 5, 0.8) * 4;
				int h = n * 2;
				int y = 0;

				// Land blocks
				for (y = 0; y < CY; y++) {
					// Are we above "ground" level?
					if (y + ay * CY >= h) {
						// If we are not yet up to sea level, fill with water blocks
						if (y + ay * CY < SEALEVEL) {
							blk[x][y][z] = 8;
							continue;
							// Otherwise, we are in the air
						}
						else 
							break;
					}

					// Random value used to determine land type
					float r = noise3d_abs((x + ax * CX) / 16.0, (y + ay * CY) / 16.0, (z + az * CZ) / 16.0, -seed, 2, 1);

					// Sand layer
					if (n + r * 5 < 4)
						blk[x][y][z] = 7;
					// Dirt layer, but use grass blocks for the top
					else if (n + r * 5 < 8)
						blk[x][y][z] = (h < SEALEVEL || y + ay * CY < h - 1) ? 1 : 3;
					// Rock layer
					else if (r < 1.25)
						blk[x][y][z] = 6;
					// Sometimes, ores!
					else
						blk[x][y][z] = 11;
				}
			}
		}
		changed = true;
	}

	void update() {
		byte4 vertex[CX * CY * CZ * 18];
		int i = 0;
		int merged = 0;
		bool vis = false;;

		// View from negative x

		for (int x = CX - 1; x >= 0; x--) {
			for (int y = 0; y < CY; y++) {
				for (int z = 0; z < CZ; z++) {
					// Line of sight blocked?
					if (isblocked(x, y, z, x - 1, y, z)) {
						vis = false;
						continue;
					}

					uint8_t top = blk[x][y][z];
					uint8_t bottom = blk[x][y][z];
					uint8_t side = blk[x][y][z];

					// Grass block has dirt sides and bottom
					if (top == 3) {
						bottom = 1;
						side = 2;
						// Wood blocks have rings on top and bottom
					}
					else if (top == 5) {
						top = bottom = 12;
					}

					// Same block as previous one? Extend it.
					if (vis && z != 0 && blk[x][y][z] == blk[x][y][z - 1]) {
						vertex[i - 5] = byte4(x, y, z + 1, side);
						vertex[i - 2] = byte4(x, y, z + 1, side);
						vertex[i - 1] = byte4(x, y + 1, z + 1, side);
						merged++;
						// Otherwise, add a new quad.
					}
					else {
						vertex[i++] = byte4(x, y, z, side);
						vertex[i++] = byte4(x, y, z + 1, side);
						vertex[i++] = byte4(x, y + 1, z, side);
						vertex[i++] = byte4(x, y + 1, z, side);
						vertex[i++] = byte4(x, y, z + 1, side);
						vertex[i++] = byte4(x, y + 1, z + 1, side);
					}

					vis = true;
				}
			}
		}

		// View from positive x

		for (int x = 0; x < CX; x++) {
			for (int y = 0; y < CY; y++) {
				for (int z = 0; z < CZ; z++) {
					if (isblocked(x, y, z, x + 1, y, z)) {
						vis = false;
						continue;
					}

					uint8_t top = blk[x][y][z];
					uint8_t bottom = blk[x][y][z];
					uint8_t side = blk[x][y][z];

					if (top == 3) {
						bottom = 1;
						side = 2;
					}
					else if (top == 5) {
						top = bottom = 12;
					}

					if (vis && z != 0 && blk[x][y][z] == blk[x][y][z - 1]) {
						vertex[i - 4] = byte4(x + 1, y, z + 1, side);
						vertex[i - 2] = byte4(x + 1, y + 1, z + 1, side);
						vertex[i - 1] = byte4(x + 1, y, z + 1, side);
						merged++;
					}
					else {
						vertex[i++] = byte4(x + 1, y, z, side);
						vertex[i++] = byte4(x + 1, y + 1, z, side);
						vertex[i++] = byte4(x + 1, y, z + 1, side);
						vertex[i++] = byte4(x + 1, y + 1, z, side);
						vertex[i++] = byte4(x + 1, y + 1, z + 1, side);
						vertex[i++] = byte4(x + 1, y, z + 1, side);
					}
					vis = true;
				}
			}
		}

		// View from negative y

		for (int x = 0; x < CX; x++) {
			for (int y = CY - 1; y >= 0; y--) {
				for (int z = 0; z < CZ; z++) {
					if (isblocked(x, y, z, x, y - 1, z)) {
						vis = false;
						continue;
					}

					uint8_t top = blk[x][y][z];
					uint8_t bottom = blk[x][y][z];

					if (top == 3) {
						bottom = 1;
					}
					else if (top == 5) {
						top = bottom = 12;
					}

					if (vis && z != 0 && blk[x][y][z] == blk[x][y][z - 1]) {
						vertex[i - 4] = byte4(x, y, z + 1, bottom + 128);
						vertex[i - 2] = byte4(x + 1, y, z + 1, bottom + 128);
						vertex[i - 1] = byte4(x, y, z + 1, bottom + 128);
						merged++;
					}
					else {
						vertex[i++] = byte4(x, y, z, bottom + 128);
						vertex[i++] = byte4(x + 1, y, z, bottom + 128);
						vertex[i++] = byte4(x, y, z + 1, bottom + 128);
						vertex[i++] = byte4(x + 1, y, z, bottom + 128);
						vertex[i++] = byte4(x + 1, y, z + 1, bottom + 128);
						vertex[i++] = byte4(x, y, z + 1, bottom + 128);
					}
					vis = true;
				}
			}
		}

		// View from positive y

		for (int x = 0; x < CX; x++) {
			for (int y = 0; y < CY; y++) {
				for (int z = 0; z < CZ; z++) {
					if (isblocked(x, y, z, x, y + 1, z)) {
						vis = false;
						continue;
					}

					uint8_t top = blk[x][y][z];
					uint8_t bottom = blk[x][y][z];

					if (top == 3) {
						bottom = 1;
					}
					else if (top == 5) {
						top = bottom = 12;
					}

					if (vis && z != 0 && blk[x][y][z] == blk[x][y][z - 1]) {
						vertex[i - 5] = byte4(x, y + 1, z + 1, top + 128);
						vertex[i - 2] = byte4(x, y + 1, z + 1, top + 128);
						vertex[i - 1] = byte4(x + 1, y + 1, z + 1, top + 128);
						merged++;
					}
					else {
						vertex[i++] = byte4(x, y + 1, z, top + 128);
						vertex[i++] = byte4(x, y + 1, z + 1, top + 128);
						vertex[i++] = byte4(x + 1, y + 1, z, top + 128);
						vertex[i++] = byte4(x + 1, y + 1, z, top + 128);
						vertex[i++] = byte4(x, y + 1, z + 1, top + 128);
						vertex[i++] = byte4(x + 1, y + 1, z + 1, top + 128);
					}
					vis = true;
				}
			}
		}

		// View from negative z

		for (int x = 0; x < CX; x++) {
			for (int z = CZ - 1; z >= 0; z--) {
				for (int y = 0; y < CY; y++) {
					if (isblocked(x, y, z, x, y, z - 1)) {
						vis = false;
						continue;
					}

					uint8_t top = blk[x][y][z];
					uint8_t bottom = blk[x][y][z];
					uint8_t side = blk[x][y][z];

					if (top == 3) {
						bottom = 1;
						side = 2;
					}
					else if (top == 5) {
						top = bottom = 12;
					}

					if (vis && y != 0 && blk[x][y][z] == blk[x][y - 1][z]) {
						vertex[i - 5] = byte4(x, y + 1, z, side);
						vertex[i - 3] = byte4(x, y + 1, z, side);
						vertex[i - 2] = byte4(x + 1, y + 1, z, side);
						merged++;
					}
					else {
						vertex[i++] = byte4(x, y, z, side);
						vertex[i++] = byte4(x, y + 1, z, side);
						vertex[i++] = byte4(x + 1, y, z, side);
						vertex[i++] = byte4(x, y + 1, z, side);
						vertex[i++] = byte4(x + 1, y + 1, z, side);
						vertex[i++] = byte4(x + 1, y, z, side);
					}
					vis = true;
				}
			}
		}

		// View from positive z

		for (int x = 0; x < CX; x++) {
			for (int z = 0; z < CZ; z++) {
				for (int y = 0; y < CY; y++) {
					if (isblocked(x, y, z, x, y, z + 1)) {
						vis = false;
						continue;
					}

					uint8_t top = blk[x][y][z];
					uint8_t bottom = blk[x][y][z];
					uint8_t side = blk[x][y][z];

					if (top == 3) {
						bottom = 1;
						side = 2;
					}
					else if (top == 5) {
						top = bottom = 12;
					}

					if (vis && y != 0 && blk[x][y][z] == blk[x][y - 1][z]) {
						vertex[i - 4] = byte4(x, y + 1, z + 1, side);
						vertex[i - 3] = byte4(x, y + 1, z + 1, side);
						vertex[i - 1] = byte4(x + 1, y + 1, z + 1, side);
						merged++;
					}
					else {
						vertex[i++] = byte4(x, y, z + 1, side);
						vertex[i++] = byte4(x + 1, y, z + 1, side);
						vertex[i++] = byte4(x, y + 1, z + 1, side);
						vertex[i++] = byte4(x, y + 1, z + 1, side);
						vertex[i++] = byte4(x + 1, y, z + 1, side);
						vertex[i++] = byte4(x + 1, y + 1, z + 1, side);
					}
					vis = true;
				}
			}
		}

		changed = false;
		elements = i;

		// If this chunk is empty, no need to allocate a chunk slot.
		if (!elements)
			return;

		// If we don't have an active slot, find one
		if (chunk_slot[slot] != this) {
			int lru = 0;
			for (int i = 0; i < CHUNKSLOTS; i++) {
				// If there is an empty slot, use it
				if (!chunk_slot[i]) {
					lru = i;
					break;
				}
				// Otherwise try to find the least recently used slot
				if (chunk_slot[i]->lastused < chunk_slot[lru]->lastused)
					lru = i;
			}

			// If the slot is empty, create a new VBO
			if (!chunk_slot[lru]) {
				glGenBuffers(1, &vbo);
				// Otherwise, steal it from the previous slot owner
			}
			else {
				vbo = chunk_slot[lru]->vbo;
				chunk_slot[lru]->changed = true;
			}

			slot = lru;
			chunk_slot[slot] = this;
		}

		// Upload vertices

		glBindBuffer(GL_ARRAY_BUFFER, vbo);
		glBufferData(GL_ARRAY_BUFFER, i * sizeof *vertex, vertex, GL_STATIC_DRAW);
	}

	void render() {
		if (changed)
			update();

		lastused = now;

		if (!elements)
			return;

		glBindBuffer(GL_ARRAY_BUFFER, vbo);
		glVertexAttribPointer(attribute_coord, 4, GL_BYTE, GL_FALSE, 0, 0);
		glDrawArrays(GL_TRIANGLES, 0, elements);
	}
};

struct superchunk {
	chunk *c[SCX][SCY][SCZ];
	time_t seed;

	superchunk() {
		seed = time(NULL);
		for (int x = 0; x < SCX; x++)
			for (int y = 0; y < SCY; y++)
				for (int z = 0; z < SCZ; z++)
					c[x][y][z] = new chunk(x - SCX / 2, y - SCY / 2, z - SCZ / 2);

		for (int x = 0; x < SCX; x++)
			for (int y = 0; y < SCY; y++)
				for (int z = 0; z < SCZ; z++) {
					if (x > 0)
						c[x][y][z]->left = c[x - 1][y][z];
					if (x < SCX - 1)
						c[x][y][z]->right = c[x + 1][y][z];
					if (y > 0)
						c[x][y][z]->below = c[x][y - 1][z];
					if (y < SCY - 1)
						c[x][y][z]->above = c[x][y + 1][z];
					if (z > 0)
						c[x][y][z]->front = c[x][y][z - 1];
					if (z < SCZ - 1)
						c[x][y][z]->back = c[x][y][z + 1];
				}
	}

	uint8_t get(int x, int y, int z) const {
		int cx = (x + CX * (SCX / 2)) / CX;
		int cy = (y + CY * (SCY / 2)) / CY;
		int cz = (z + CZ * (SCZ / 2)) / CZ;

		if (cx < 0 || cx >= SCX || cy < 0 || cy >= SCY || cz <= 0 || cz >= SCZ)
			return 0;

		return c[cx][cy][cz]->get(x & (CX - 1), y & (CY - 1), z & (CZ - 1));
	}

	void set(int x, int y, int z, uint8_t type) {
		int cx = (x + CX * (SCX / 2)) / CX;
		int cy = (y + CY * (SCY / 2)) / CY;
		int cz = (z + CZ * (SCZ / 2)) / CZ;

		if (cx < 0 || cx >= SCX || cy < 0 || cy >= SCY || cz <= 0 || cz >= SCZ)
			return;

		c[cx][cy][cz]->set(x & (CX - 1), y & (CY - 1), z & (CZ - 1), type);
	}

	void render(const glm::mat4 &pv) {
		float ud = 1 >> 32;
		int ux = -1;
		int uy = -1;
		int uz = -1;

		for (int x = 0; x < SCX; x++) {
			for (int y = 0; y < SCY; y++) {
				for (int z = 0; z < SCZ; z++) {
					glm::mat4 model = glm::translate(glm::mat4(1.0f), glm::vec3(c[x][y][z]->ax * CX, c[x][y][z]->ay * CY, c[x][y][z]->az * CZ));
					glm::mat4 mvp = pv * model;

					// Is this chunk on the screen?
					glm::vec4 center = mvp * glm::vec4(CX / 2, CY / 2, CZ / 2, 1);

					float d = glm::length(center);
					center.x /= center.w;
					center.y /= center.w;

					// If it is behind the camera, don't bother drawing it
					if (center.z < -CY / 2)
						continue;

					// If it is outside the screen, don't bother drawing it
					if (fabsf(center.x) > 1 + fabsf(CY * 2 / center.w) || fabsf(center.y) > 1 + fabsf(CY * 2 / center.w))
						continue;

					// If this chunk is not initialized, skip it
					if (!c[x][y][z]->initialized) {
						// But if it is the closest to the camera, mark it for initialization
						if (ux < 0 || d < ud) {
							ud = d;
							ux = x;
							uy = y;
							uz = z;
						}
						continue;
					}

					glUniformMatrix4fv(uniform_mvp, 1, GL_FALSE, glm::value_ptr(mvp));

					c[x][y][z]->render();
				}
			}
		}

		if (ux >= 0) {
			c[ux][uy][uz]->noise(seed);
			if (c[ux][uy][uz]->left)
				c[ux][uy][uz]->left->noise(seed);
			if (c[ux][uy][uz]->right)
				c[ux][uy][uz]->right->noise(seed);
			if (c[ux][uy][uz]->below)
				c[ux][uy][uz]->below->noise(seed);
			if (c[ux][uy][uz]->above)
				c[ux][uy][uz]->above->noise(seed);
			if (c[ux][uy][uz]->front)
				c[ux][uy][uz]->front->noise(seed);
			if (c[ux][uy][uz]->back)
				c[ux][uy][uz]->back->noise(seed);
			c[ux][uy][uz]->initialized = true;
		}
	}
};

static superchunk *world;

static void update_vectors() {
	forward.x = sinf(angle.x);
	forward.y = 0;
	forward.z = cosf(angle.x);

	right.x = -cosf(angle.x);
	right.y = 0;
	right.z = sinf(angle.x);

	lookat.x = sinf(angle.x) * cosf(angle.y);
	lookat.y = sinf(angle.y);
	lookat.z = cosf(angle.x) * cosf(angle.y);

	up = glm::cross(right, lookat);
}

static float fract(float value) {
	float f = value - floorf(value);
	if (f > 0.5)
		return 1 - f;
	else
		return f;
}

GLint get_attrib(GLuint program, const char *name) {
	GLint attribute = glGetAttribLocation(program, name);
	if (attribute == -1)
		fprintf(stderr, "Could not bind attribute %s\n", name);
	return attribute;
}

GLint get_uniform(GLuint program, const char *name) {
	GLint uniform = glGetUniformLocation(program, name);
	if (uniform == -1)
		fprintf(stderr, "Could not bind uniform %s\n", name);
	return uniform;
}

void print_log(GLuint object)
{
	GLint log_length = 0;
	if (glIsShader(object))
		glGetShaderiv(object, GL_INFO_LOG_LENGTH, &log_length);
	else if (glIsProgram(object))
		glGetProgramiv(object, GL_INFO_LOG_LENGTH, &log_length);
	else {
		fprintf(stderr, "printlog: Not a shader or a program\n");
		return;
	}

	char* log = (char*)malloc(log_length);

	if (glIsShader(object))
		glGetShaderInfoLog(object, log_length, NULL, log);
	else if (glIsProgram(object))
		glGetProgramInfoLog(object, log_length, NULL, log);

	fprintf(stderr, "%s", log);
	free(log);
}

char* file_read(const char* filename)
{
	FILE* in = fopen(filename, "rb");
	if (in == NULL) return NULL;

	int res_size = BUFSIZ;
	char* res = (char*)malloc(res_size);
	int nb_read_total = 0;

	while (!feof(in) && !ferror(in)) {
		if (nb_read_total + BUFSIZ > res_size) {
			if (res_size > 10 * 1024 * 1024) break;
			res_size = res_size * 2;
			res = (char*)realloc(res, res_size);
		}
		char* p_res = res + nb_read_total;
		nb_read_total += fread(p_res, 1, BUFSIZ, in);
	}

	fclose(in);
	res = (char*)realloc(res, nb_read_total + 1);
	res[nb_read_total] = '\0';
	return res;
}

GLuint create_shader(const char* filename, GLenum type)
{
	const GLchar* source = file_read(filename);
	if (source == NULL) {
		fprintf(stderr, "Error opening %s: ", filename); perror("");
		return 0;
	}
	GLuint res = glCreateShader(type);
	const GLchar* sources[] = {
		// Define GLSL version
#ifdef GL_ES_VERSION_2_0
		"#version 100\n"  // OpenGL ES 2.0
#else
		"#version 120\n"  // OpenGL 2.1
#endif
		,
		// GLES2 precision specifiers
#ifdef GL_ES_VERSION_2_0
		// Define default float precision for fragment shaders:
		(type == GL_FRAGMENT_SHADER) ?
		"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
		"precision highp float;           \n"
		"#else                            \n"
		"precision mediump float;         \n"
		"#endif                           \n"
		: ""
		// Note: OpenGL ES automatically defines this:
		// #define GL_ES
#else
		// Ignore GLES 2 precision specifiers:
		"#define lowp   \n"
		"#define mediump\n"
		"#define highp  \n"
#endif
		,
		source };
	glShaderSource(res, 3, sources, NULL);
	free((void*)source);

	glCompileShader(res);
	GLint compile_ok = GL_FALSE;
	glGetShaderiv(res, GL_COMPILE_STATUS, &compile_ok);
	if (compile_ok == GL_FALSE) {
		fprintf(stderr, "%s:", filename);
		print_log(res);
		glDeleteShader(res);
		return 0;
	}

	return res;
}

GLuint create_program(const char *vertexfile, const char *fragmentfile) {
	GLuint program = glCreateProgram();
	GLuint shader;

	if (vertexfile) {
		shader = create_shader(vertexfile, GL_VERTEX_SHADER);
		if (!shader)
			return 0;
		glAttachShader(program, shader);
	}

	if (fragmentfile) {
		shader = create_shader(fragmentfile, GL_FRAGMENT_SHADER);
		if (!shader)
			return 0;
		glAttachShader(program, shader);
	}

	glLinkProgram(program);
	GLint link_ok = GL_FALSE;
	glGetProgramiv(program, GL_LINK_STATUS, &link_ok);
	if (!link_ok) {
		fprintf(stderr, "glLinkProgram:");
		print_log(program);
		glDeleteProgram(program);
		return 0;
	}

	return program;
}

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // uncomment this statement to fix compilation on OS X
#endif

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
	glfwSetCursorPosCallback(window, mouse_callback);
	glfwSetScrollCallback(window, scroll_callback);

	// tell GLFW to capture our mouse
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    // glad: load all OpenGL function pointers
    // ---------------------------------------
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    // build and compile our shader zprogram
    // ------------------------------------
	program = create_program("glescraft.v.glsl", "glescraft.f.glsl");

	if (program == 0)
		return 0;

	attribute_coord = get_attrib(program, "coord");
	uniform_mvp = get_uniform(program, "mvp");

	if (attribute_coord == -1 || uniform_mvp == -1)
		return 0;

	/* Create and upload the texture */

	glActiveTexture(GL_TEXTURE0);
	glGenTextures(1, &texture);
	glBindTexture(GL_TEXTURE_2D, texture);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, textures.width, textures.height, 0, GL_RGBA, GL_UNSIGNED_BYTE, textures.pixel_data);
	glGenerateMipmap(GL_TEXTURE_2D);

	/* Create the world */

	world = new superchunk;

	position = glm::vec3(0, CY + 1, 0);
	angle = glm::vec3(0, -0.5, 0);
	update_vectors();

	/* Create a VBO for the cursor */

	glGenBuffers(1, &cursor_vbo);

	/* OpenGL settings that do not change while running this program */

	glUseProgram(program);
	glUniform1i(uniform_texture, 0);
	glClearColor(0.6, 0.8, 1.0, 0.0);
	glEnable(GL_CULL_FACE);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST); // Use GL_NEAREST_MIPMAP_LINEAR if you want to use mipmaps
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	glPolygonOffset(1, 1);

	glEnableVertexAttribArray(attribute_coord);

	unsigned int VAO;
	glGenVertexArrays(1, &VAO);
	
	glBindVertexArray(VAO);

	glEnableVertexAttribArray(0);

    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
		// per-frame time logic
		// --------------------
		float currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;

		// input
		// -----
		processInput(window);

		glBindVertexArray(VAO); 

		// pass projection matrix to shader (note that in this case it could change every frame)
		glm::mat4 projection = glm::perspective(glm::radians(camera.Zoom), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);

		// camera/view transformation
		glm::mat4 view = camera.GetViewMatrix();

		glm::mat4 mvp = projection * view;

		glUniformMatrix4fv(uniform_mvp, 1, GL_FALSE, glm::value_ptr(mvp));

		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glUseProgram(program);
		glEnable(GL_DEPTH_TEST);
		glEnable(GL_POLYGON_OFFSET_FILL);

		/* Then draw chunks */

		world->render(mvp);

		/* At which voxel are we looking? */

		if (select_using_depthbuffer) {
			/* Find out coordinates of the center pixel */

			float depth;
			glReadPixels(ww / 2, wh / 2, 1, 1, GL_DEPTH_COMPONENT, GL_FLOAT, &depth);

			glm::vec4 viewport = glm::vec4(0, 0, ww, wh);
			glm::vec3 wincoord = glm::vec3(ww / 2, wh / 2, depth);
			glm::vec3 objcoord = glm::unProject(wincoord, view, projection, viewport);

			/* Find out which block it belongs to */

			mx = objcoord.x;
			my = objcoord.y;
			mz = objcoord.z;
			if (objcoord.x < 0)
				mx--;
			if (objcoord.y < 0)
				my--;
			if (objcoord.z < 0)
				mz--;

			/* Find out which face of the block we are looking at */

			if (fract(objcoord.x) < fract(objcoord.y))
				if (fract(objcoord.x) < fract(objcoord.z))
					face = 0; // X
				else
					face = 2; // Z
			else
				if (fract(objcoord.y) < fract(objcoord.z))
					face = 1; // Y
				else
					face = 2; // Z

			if (face == 0 && lookat.x > 0)
				face += 3;
			if (face == 1 && lookat.y > 0)
				face += 3;
			if (face == 2 && lookat.z > 0)
				face += 3;
		}
		else {
			/* Very naive ray casting algorithm to find out which block we are looking at */

			glm::vec3 testpos = position;
			glm::vec3 prevpos = position;

			for (int i = 0; i < 100; i++) {
				/* Advance from our currect position to the direction we are looking at, in small steps */

				prevpos = testpos;
				testpos += lookat * 0.1f;

				mx = floorf(testpos.x);
				my = floorf(testpos.y);
				mz = floorf(testpos.z);

				/* If we find a block that is not air, we are done */

				if (world->get(mx, my, mz))
					break;
			}

			/* Find out which face of the block we are looking at */

			int px = floorf(prevpos.x);
			int py = floorf(prevpos.y);
			int pz = floorf(prevpos.z);

			if (px > mx)
				face = 0;
			else if (px < mx)
				face = 3;
			else if (py > my)
				face = 1;
			else if (py < my)
				face = 4;
			else if (pz > mz)
				face = 2;
			else if (pz < mz)
				face = 5;

			/* If we are looking at air, move the cursor out of sight */

			if (!world->get(mx, my, mz))
				mx = my = mz = 99999;
		}

		float bx = mx;
		float by = my;
		float bz = mz;

		/* Render a box around the block we are pointing at */

		float box[24][4] = {
			{ bx + 0, by + 0, bz + 0, 14 },
			{ bx + 1, by + 0, bz + 0, 14 },
			{ bx + 0, by + 1, bz + 0, 14 },
			{ bx + 1, by + 1, bz + 0, 14 },
			{ bx + 0, by + 0, bz + 1, 14 },
			{ bx + 1, by + 0, bz + 1, 14 },
			{ bx + 0, by + 1, bz + 1, 14 },
			{ bx + 1, by + 1, bz + 1, 14 },

			{ bx + 0, by + 0, bz + 0, 14 },
			{ bx + 0, by + 1, bz + 0, 14 },
			{ bx + 1, by + 0, bz + 0, 14 },
			{ bx + 1, by + 1, bz + 0, 14 },
			{ bx + 0, by + 0, bz + 1, 14 },
			{ bx + 0, by + 1, bz + 1, 14 },
			{ bx + 1, by + 0, bz + 1, 14 },
			{ bx + 1, by + 1, bz + 1, 14 },

			{ bx + 0, by + 0, bz + 0, 14 },
			{ bx + 0, by + 0, bz + 1, 14 },
			{ bx + 1, by + 0, bz + 0, 14 },
			{ bx + 1, by + 0, bz + 1, 14 },
			{ bx + 0, by + 1, bz + 0, 14 },
			{ bx + 0, by + 1, bz + 1, 14 },
			{ bx + 1, by + 1, bz + 0, 14 },
			{ bx + 1, by + 1, bz + 1, 14 },
		};

		glDisable(GL_POLYGON_OFFSET_FILL);
		glDisable(GL_CULL_FACE);
		glUniformMatrix4fv(uniform_mvp, 1, GL_FALSE, glm::value_ptr(mvp));
		glBindBuffer(GL_ARRAY_BUFFER, cursor_vbo);
		glBufferData(GL_ARRAY_BUFFER, sizeof box, box, GL_DYNAMIC_DRAW);
		glVertexAttribPointer(attribute_coord, 4, GL_FLOAT, GL_FALSE, 0, 0);
		glDrawArrays(GL_LINES, 0, 24);

		/* Draw a cross in the center of the screen */
		
		float cross[4][4] = {
			{ -0.05, 0, 0, 13 },
			{ +0.05, 0, 0, 13 },
			{ 0, -0.05, 0, 13 },
			{ 0, +0.05, 0, 13 },
		};

		glDisable(GL_DEPTH_TEST);
		glm::mat4 one(1);
		glUniformMatrix4fv(uniform_mvp, 1, GL_FALSE, glm::value_ptr(one));
		glBufferData(GL_ARRAY_BUFFER, sizeof cross, cross, GL_DYNAMIC_DRAW);
		glVertexAttribPointer(attribute_coord, 4, GL_FLOAT, GL_FALSE, 0, 0);
		glDrawArrays(GL_LINES, 0, 4);
		
		glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow *window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);

	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		camera.ProcessKeyboard(FORWARD, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		camera.ProcessKeyboard(BACKWARD, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		camera.ProcessKeyboard(LEFT, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		camera.ProcessKeyboard(RIGHT, deltaTime);
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	// make sure the viewport matches the new window dimensions; note that width and 
	// height will be significantly larger than specified on retina displays.
	glViewport(0, 0, width, height);
}


// glfw: whenever the mouse moves, this callback is called
// -------------------------------------------------------
void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
	if (firstMouse)
	{
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	float yoffset = lastY - ypos; // reversed since y-coordinates go from bottom to top

	lastX = xpos;
	lastY = ypos;

	camera.ProcessMouseMovement(xoffset, yoffset);
}

// glfw: whenever the mouse scroll wheel scrolls, this callback is called
// ----------------------------------------------------------------------
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
	camera.ProcessMouseScroll(yoffset);
}